<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute" creationComplete="check_sign_in();"
	modalTransparency="0" 
	modalTransparencyColor="#000000" 
	modalTransparencyBlur="0" 
	backgroundDisabledColor="#000000" 
	disabledOverlayAlpha="0"
	xmlns:ns1="views.map.*" backgroundColor="#0d2227" 
	backgroundImage="assets/wallpaper.jpg" backgroundSize="100%" 
	xmlns:views="views.*" verticalScrollPolicy="off" horizontalScrollPolicy="off" 
	xmlns:gateway="views.gateway.*"
	xmlns:settings="views.settings.*" 
	xmlns:device="views.device.*"
	xmlns:dictionary="views.dictionary.*"
	xmlns:user="views.user.*"
	xmlns:conf="views.conference.*" enabled="false" xmlns:record="views.record.*">
	<mx:Script>
		<![CDATA[
			import events.PopupEvent;
			
			import mx.collections.ArrayCollection;
			import mx.effects.Effect;
			import mx.effects.Fade;
			import mx.effects.Resize;
			import mx.effects.Zoom;
			import mx.events.CloseEvent;
			import mx.events.ItemClickEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectProxy;
			import mx.utils.URLUtil;
			
			import utils.*;
			import utils.Alert;
			import utils.Config;
			
			import views.TitleWin;
			import views.conference.Conference;
			import views.dictionary.Drivers;
			import views.gateway.Gateway;
			import views.record.Config;
			import views.settings.Language;
			import views.settings.Route;
			import views.settings.Settings;
			import views.settings.Upgrade;
			import views.user.Change_Passwd;
			import views.user.Sign_In;
			import views.user.UserInfo;
			
			[Bindable]
			public static var SPOTS:XML;
			
			[Bindable]		
			private var loginWin:Sign_In;
			private var cpWin:Change_Passwd;
			
			[Bindable]
			private var gFilter:GlowFilter = Utils.neonFilter();
			
			[Bindable]
			private var encoders:XML;
			
			public static var cookie:Object;
			public static var lanIndex:Number = 0;
			public static var nvsURL:String = null;
			
			[Bindable]
			private var gwCompCollection:ArrayCollection;
		
			private function show_monitor():void {
				var url:String = "/monitor?lan=" + lanIndex; 
				var request:URLRequest = new URLRequest(url); 
				navigateToURL(request,"_self");
			}
			
			private function menuClick(event:MouseEvent):void {
				var item:MenuItem = event.currentTarget as MenuItem;
				item.selected(true);
				for(var i:Number = 0; i < menuItems.getChildren().length; i++) {
					var _item:Object = menuItems.getChildAt(i);
					if( _item is MenuItem && _item != item)
						_item.selected(false);	
				}
			}
			
			public function readLanguageSetting():void {
				cookie = SharedObject.getLocal("cookie");
				if(cookie && !isNaN(cookie.data.lan as Number)) {
					lanIndex = cookie.data.lan as Number;
				}
				languageRPC.url = Utils.get_url("/language?lan=" + lanIndex);
				languageRPC.send();
			}
			
			private function set_language(event:ResultEvent):void {
				Str.xml = XML(event.result);
				logRPC.send();	
			}
			
			private function launchSignInScreen():void {
				Application.application.setStyle("backgroundImage","assets/w.jpg");
				menu.visible = false;
				top.visible = false;
				this.currentState = "";
				loginWin = new Sign_In;
				loginWin.callBack = enter;
				this.prePopUp(new PopupEvent("Popup",new MouseEvent(MouseEvent.CLICK,true,false,width/2,height/2),loginWin));
			}
			
			private function enter(type:String):void {
				if(type == "0") {
					Application.application.setStyle("backgroundImage","assets/wallpaper.jpg");
					menu.visible = true;
					top.visible = true;
					currentState = "";
					get_dictionary();
				} else {
					show_monitor();
				}
			}
			
			private function get_dictionary():void {
				dictRPC.url = Utils.get_url("/gateway/get_dictionary");
				dictRPC.send();
			}
			
			private function get_spots():void {
				spotsRPC.url = Utils.get_url("/spots/list");
				spotsRPC.send();
			}
			
			private function get_encoders():void {
				encoderRPC.url = Utils.get_url("/gateway/get_devices");
				encoderRPC.send();
			}
			
			private function init_encoders(event:ResultEvent):void {
				encoders = XML(event.result);
				get_spots();
			}
			
			private function set_spots(event:ResultEvent):void {
				SPOTS = XML(event.result);
				enabled = true;
			}
			
			private function set_dictionary(event:ResultEvent):void {
				Gateway.DICTIONARY = XML(event.result);
				get_encoders();	
			}
			
			private function sign_off(event:CloseEvent):void {
				if (event.detail == mx.controls.Alert.YES) {
					logRPC.url = utils.Config.HOST + "/sign_out/";
					logRPC.send();
				}		
			}
			
			private function confirm_sign_off():void {
				Alert.show(Str.xml.confirm_exit.@string, Str.xml.exit_confirm.@string, mx.controls.Alert.YES|mx.controls.Alert.NO, this, sign_off, null, mx.controls.Alert.NO);
			}
			
			private function check_sign_in():void {
				readLanguageSetting();
				logRPC.url = Utils.get_url("/check_sign_in/");		
			} 
			
			private function init(event:ResultEvent):void {
				if(event.result.toString() != '2') {
					enter(event.result.toString());	
				} else
					launchSignInScreen();
			}
			
			private function showChangePasswd(event:MouseEvent):void {
				cpWin = new Change_Passwd;
				prePopUp(new PopupEvent(PopupEvent.POPUP, event, cpWin));
			}
			
			private function showSetting(event:MouseEvent):void {
				currentState = "";
				var s:Settings = new Settings;
				settings.dispatchEvent(new PopupEvent(PopupEvent.POPUP, event, s));
			}
			
			private function showRoute(event:MouseEvent):void {
				currentState = "";
				var r:Route = new Route;
				route.dispatchEvent(new PopupEvent(PopupEvent.POPUP, event, r));
			}
//			
//			private function showUpgrade(event:MouseEvent):void {
//				currentState = "";
//				var u:Upgrade = new Upgrade;
//				upgrade.dispatchEvent(new PopupEvent(PopupEvent.POPUP, event, u));
//			}
			
			private function showMonitorUser(event:MouseEvent):void {
				currentState = "";
				var u:UserInfo = new UserInfo;
				users.dispatchEvent(new PopupEvent(PopupEvent.POPUP, event, u));
			}
			
			private function showGateway(event:MouseEvent):void {
				currentState = "";
				var g:Gateway = new Gateway;
				g.encoders = encoders;
				gateway.dispatchEvent(new PopupEvent(PopupEvent.POPUP, event, g));
			}
			
			private function showLanguage(event:MouseEvent):void {
				currentState = "";
				var l:Language = new Language;
				language.dispatchEvent(new PopupEvent(PopupEvent.POPUP, event, l));
			}
			
			/*
			private function showDictionary(event:MouseEvent):void {
				currentState = "";
				var d:views.dictionary.Dictionary = new views.dictionary.Dictionary;
				//d.height = height - 20;
				dictionary.dispatchEvent(new PopupEvent(PopupEvent.POPUP, event, d));
			}
			*/
			
			private function showRecordSetting(event:MouseEvent):void {
				currentState = "";
				var s:views.record.Config = new views.record.Config;
				recordSetting.dispatchEvent(new PopupEvent(PopupEvent.POPUP, null, s));
			}
			
			private var nextstep;
			
			private function show_replay():void {
				nextstep = "replay";
				test_record_server();	
			}
			
			private function show_record_schedule():void {
				nextstep = "schedule";
				test_record_server();	
			}
			
			private function test_record_server():void {
				confRPC.url = Utils.get_url("/record_conf/test");
				confRPC.send();
			}
			
			private function set_conf(event:ResultEvent):void {
				var url:String = event.result.toString();
				if(url != "0") {
					nvsURL = url;
					this.currentState = nextstep;	
				} else {
					Alert.show("无法连接录像服务器");
				}
			}
			
			private var win:TitleWin;
			private var popX:Number;
			private var popY:Number;
			private function prePopUp(event:PopupEvent):void {
				win = event.win;
				win.addEventListener("CloseWin", preCloseWin);
				PopUpManager.addPopUp(win,this,true);
				PopUpManager.centerPopUp(win);
				fadePop.play([win]);
			}
			
			private function preCloseWin(event:Event):void {
				fadeClose.target = win;
				closePopUp.play(null,true);
			}
			
			private function confirm_reboot():void {
				utils.Alert.show(Str.xml.confirm_reboot.@string, Str.xml.reboot_confirm.@string, mx.controls.Alert.YES|mx.controls.Alert.NO, this, reboot, null, mx.controls.Alert.NO);
			}
			
			private function confirm_apply():void {
				utils.Alert.show(Str.xml.confirm_apply.@string, Str.xml.apply_confirm.@string, mx.controls.Alert.YES|mx.controls.Alert.NO, this, apply_setting, null, mx.controls.Alert.NO);
			}
			
			private function apply_setting(event:CloseEvent):void {
				if (event.detail == mx.controls.Alert.YES) {
					netRebootRPC.url = Utils.get_url("/apply_setting");
					netRebootRPC.send();
					utils.Alert.show(Str.xml.applied.@string);
				}	
			}
			
			private function reboot(event:CloseEvent):void {
				if (event.detail == mx.controls.Alert.YES) {
					netRebootRPC.url = Utils.get_url("/reboot/");
					netRebootRPC.send();
					utils.Alert.show(Str.xml.rebooting.@string);
				}
			}
			
			private function closeWin():void {
				PopUpManager.removePopUp(win);
			}
			
//			private function showConference(event:MouseEvent):void {
//				currentState = "";
//				var c:Conference = new Conference;
//				c.height = height * 0.95;
//				conf.dispatchEvent(new PopupEvent(PopupEvent.POPUP, event, c));
//			}
		]]>
	</mx:Script>
	
	<mx:Style source="stylesheets/stylesheet.css"/>
	
	<mx:HTTPService id="languageRPC" showBusyCursor="true" useProxy="false" resultFormat="xml" result="set_language(event)"/>
	<mx:HTTPService id="encoderRPC" showBusyCursor="true" resultFormat="xml" result="init_encoders(event)"/>
	<mx:HTTPService id="logRPC" result="init(event)" resultFormat="text"/>
	<mx:HTTPService id="dictRPC" showBusyCursor="true" resultFormat="xml" result="set_dictionary(event)"/>
	<mx:HTTPService id="spotsRPC" showBusyCursor="true" resultFormat="xml" result="set_spots(event)"/>
	<mx:HTTPService id="netRebootRPC"/>
	<mx:HTTPService id="applyRPC"/>
	<mx:HTTPService id="confRPC" 
		useProxy="false" method="POST" showBusyCursor="true" 
		result="set_conf(event)" resultFormat="xml"/>
	
	<mx:VBox id="top" visible="false" x="0" y="0" width="100%" height="100%" bottom="5" borderStyle="none" borderColor="#0A0A0A" alpha="1.0">	
		<mx:Canvas width="100%" height="77" backgroundAlpha="0.2" backgroundColor="#0052CC" borderStyle="none" borderColor="#428DC2" borderThickness="0">
			<mx:HBox width="100%" height="100%" verticalAlign="middle" left="20" right="20" horizontalGap="1">
				<mx:Image source="assets/logo.png"/>
				<mx:Spacer width="5"/>
				<mx:Canvas>
					<mx:Label x="1" bottom="0" text="{Str.xml.sysname.@string}" fontSize="20" color="#cccccc"/>
					<mx:Label x="0" bottom="1" text="{Str.xml.sysname.@string}" fontSize="20" color="#000000"/>
				</mx:Canvas>
				<mx:Spacer width="100%"/>
				<mx:Button label="{Str.xml.apply_new_setting.@string}" click="confirm_apply()"/>
				<mx:Button label="{Str.xml.reboot.@string}" click="confirm_reboot()"/>
				<mx:Button label="{Str.xml.change_passwd.@string}" id="cp" click="this.showChangePasswd(event)"/>
				<mx:Button label="{Str.xml.logout.@string}" click="this.confirm_sign_off()"/>
				<mx:Spacer width="20"/>
				<mx:Canvas backgroundAlpha="0.2" backgroundColor="#FFFFFF" height="100%" width="2"/>
				<mx:Spacer width="20"/>
				<mx:Image source="assets/02.png"/>
			</mx:HBox>
		</mx:Canvas>
		<mx:HBox height="100%" width="100%" paddingLeft="10">
			<mx:Canvas id="menu" height="100%" width="180" backgroundAlpha="0.3" backgroundColor="#ffffff" 
				visible="false" horizontalScrollPolicy="off" cornerRadius="10" 
				borderStyle="solid" borderThickness="0" dropShadowEnabled="true">
				<mx:VBox id="menuItems" width="100%" verticalGap="1" height="100%" paddingLeft="1" paddingRight="2">
					<mx:Canvas width="100%" height="28" backgroundSize="100%" backgroundImage="assets/flist.png" backgroundAlpha="1" cornerRadius="10">
						<mx:Label bottom="0" text="{Str.xml.functions.@string}" horizontalCenter="0" fontSize="14" fontWeight="bold" color="#405776"/>
					</mx:Canvas>
					<views:MenuItem id="settings" text="{Str.xml.system.@string + Str.xml.split.@string + Str.xml.setting.@string}" Popup="prePopUp(event)" click="menuClick(event);showSetting(event)"/>
					<views:MenuItem id="route" text="{Str.xml.static_routes.@string}" Popup="prePopUp(event)" click="menuClick(event);showRoute(event)"/>
					<views:MenuItem id="gateway" text="{Str.xml.devices.@string}" Popup="prePopUp(event)" click="menuClick(event);showGateway(event)"/>
					<views:MenuItem id="recordSetting" text="{Str.xml.record.@string}{Str.xml.split.@string}{Str.xml.setting.@string}" Popup="prePopUp(event)" click="menuClick(event);showRecordSetting(event)"/>
					<views:MenuItem id="recordSchedule" text="{Str.xml.record.@string}{Str.xml.split.@string}{Str.xml.schedule.@string}" click="menuClick(event);show_record_schedule()"/>
					<views:MenuItem id="recordReplay" text="{Str.xml.record.@string}{Str.xml.split.@string}{Str.xml.replay.@string}" click="menuClick(event);show_replay()"/>
					<views:MenuItem id="drivers" text="{Str.xml.drivers.@string}" click="menuClick(event);this.currentState='drivers'"/>
					<!--<views:MenuItem id="dictionary" text="{Str.xml.dictionary.@string}" Popup="prePopUp(event)" click="menuClick(event);showDictionary(event)"/>
					<views:MenuItem text="会场管理" click="menuClick(event);this.currentState='deviceState'"/>
					<views:MenuItem text="会议管理" id="conf" Popup="prePopUp(event)" click="menuClick(event);showConference(event)"/>
					-->
					<views:MenuItem id="users" text="{Str.xml.monitor_user.@string}" Popup="prePopUp(event)" click="menuClick(event);showMonitorUser(event)"/>
					<views:MenuItem id="language" text="{Str.xml.language_setting.@string}" Popup="prePopUp(event)" click="menuClick(event);showLanguage(event)"/>
					<!--
					<views:MenuItem id="upgrade" text="{Str.xml.online_upgrade.@string}" Popup="prePopUp(event)" click="menuClick(event);showUpgrade(event)"/>
					-->
					<views:MenuItem text="{Str.xml.monitor_source.@string}" click="menuClick(event);this.show_monitor()"/>
				</mx:VBox>
			</mx:Canvas>
			<mx:Canvas width="100%" height="100%" id="mainFrame">
				
			</mx:Canvas>
		</mx:HBox>
	</mx:VBox>
	<mx:states>
		<mx:State name="userState">
			<mx:AddChild position="lastChild" relativeTo="{mainFrame}">
				<user:UserGroups Popup="prePopUp(event)"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="drivers">
			<mx:AddChild position="lastChild" relativeTo="{mainFrame}">
				<dictionary:Drivers Popup="prePopUp(event)"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="schedule">
			<mx:AddChild position="lastChild" relativeTo="{mainFrame}">
				<record:Setting Popup="prePopUp(event)"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="replay">
			<mx:AddChild position="lastChild" relativeTo="{mainFrame}">
				<record:ReplayMain Popup="prePopUp(event)"/>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	
	<!--
	<mx:states>
		<mx:State name="GatewayState">
			<mx:AddChild position="lastChild" relativeTo="{mainFrame}">
				<gateway:Gateway id="gateway" encoders="{encoders}" Popup="prePopUp(event)"/>
			</mx:AddChild>
		</mx:State>
		
		<mx:State name="deviceState" enterState="devices.init_venues()">
			<mx:AddChild position="lastChild" relativeTo="{mainFrame}">
				<device:Devices id="devices" Popup="prePopUp(event)" encoders="{spotsArray}"/>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	-->
	
	<mx:Sequence id="m">
		<mx:Parallel duration="0">
			<mx:Move id="mL" target="{l}"/>
			<mx:Move id="mR" target="{r}"/>
			<mx:Move id="mT" target="{t}"/>
			<mx:Move id="mB" target="{b}"/>
			<mx:Fade alphaFrom="0" alphaTo="0" targets="{[l,r,t,b]}"/>
		</mx:Parallel>
			
		<mx:Parallel repeatCount="2" duration="100" targets="{[l,r,t,b]}">
			<mx:Glow alphaFrom="0.2" alphaTo="1" blurXFrom="0" blurXTo="10" blurYFrom="0" blurYTo="10"/> 
		</mx:Parallel>
		<mx:Glow alphaTo="1" blurXTo="0" blurYTo="0" targets="{[l,r,t,b]}" duration="10"/>
		
		<mx:Parallel  duration="500">
			<mx:Move id="mL1" target="{l}"/>
			<mx:Move id="mR1" target="{r}"/>
			<mx:Move id="mT1" target="{t}"/>
			<mx:Move id="mB1" target="{b}"/>
			<mx:Fade alphaFrom="5" alphaTo="0.8" targets="{[l,r,t,b]}"/>
		</mx:Parallel>
		<mx:Fade id="fadePop" alphaFrom="0" alphaTo="1"/>
	</mx:Sequence>
	
	
	<mx:Sequence id="closePopUp">
		<mx:Parallel id="mClose" duration="500">
			<mx:Move id="mLC" target="{l}"/>
			<mx:Move id="mRC" target="{r}"/>
			<mx:Move id="mTC" target="{t}"/>
			<mx:Move id="mBC" target="{b}"/>
			<mx:Fade alphaFrom="0" targets="{[l,r,t,b]}"/>
		</mx:Parallel>
		<mx:Parallel duration="500">
			<mx:Move id="mLC1" target="{l}"/>
			<mx:Move id="mRC1" target="{r}"/>
			<mx:Move id="mTC1" target="{t}"/>
			<mx:Move id="mBC1" target="{b}"/>
			<mx:Fade id="fadeClose" alphaFrom="0" alphaTo="1" effectEnd="closeWin()"/>
		</mx:Parallel>
	</mx:Sequence>
	
	<mx:Canvas id="l" width="1" height="100%" x="-1" y="0" styleName="laser"/>
	<mx:Canvas id="r" width="1" height="100%" x="-1" y="0" styleName="laser"/>
	<mx:Canvas id="t" width="100%" height="1" x="0" y="-1" styleName="laser"/>
	<mx:Canvas id="b" width="100%" height="1" x="0" y="-1" styleName="laser"/>
</mx:Application>
